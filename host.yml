---
- hosts: localhost
  tasks:

  - name: Get Jetson Model from /proc/device-tree/model
    ansible.builtin.command: cat /proc/device-tree/model
    register: jetson_model

  - name: Check Orin Nano
    ansible.builtin.set_fact:
      jetson_board: "orin_nano"
    when: "'Orin Nano Developer' in jetson_model.stdout"

  - name: Check Orin Nano NX
    ansible.builtin.set_fact:
      jetson_board: "orin_nx"
    when: "'Orin NX' in jetson_model.stdout"

  - name: copy authorized_keys to root
    copy:
      src: "files/root_authorized_keys"
      dest: /root/.ssh/authorized_keys
      mode: 0600
      owner: root
      group: root

  - name: Remove Ubuntu's Network Manager 
    apt:
      pkg:
          - network-manager
      state: absent
      update_cache: no

  - name: copy udev 70-persistent-net.rules
    copy:
      src: "files/70-persistent-net.rules"
      dest: /etc/udev/rules.d/70-persistent-net.rules
      mode: 0755
      owner: root
      group: root

  - name: copy /etc/network/interfaces 
    copy:
      src: "files/interfaces"
      dest: /etc/network/interfaces
      mode: 0755
      owner: root
      group: root

  - name: Allow udev to set interface names
    lineinfile:
      path: /usr/lib/systemd/network/99-default.link
      state: present
      regexp: '^NamePolicy=keep'
      line: 'NamePolicy=database keep kernel onboard slot path'

  - name: Check if eth1 exists (first boot only)
    shell: ifconfig
    register: network_interfaces

  - name: Set MAC address for each interface
    shell: ifconfig eth1 hw ether $(ethtool -P eth1 | awk '{print $3}')
    when: "'eth1' in network_interfaces.stdout"
    ignore_errors: yes

  - name: Set hostname based on eth1
    shell: cat /sys/class/net/eth1/address | sed -e 's/://g' | cut -c 9-12
    when: "'eth1' in network_interfaces.stdout"
    register: new_hostname
    changed_when: False

  - name: Set hostname based on en0
    shell: cat /sys/class/net/en0/address | sed -e 's/://g' | cut -c 9-12
    when: "'en0' in network_interfaces.stdout"
    register: new_hostname
    changed_when: False

  - name: Update hostname (systemd)
    hostname:
      name: "{{ new_hostname.stdout }}"
    when: new_hostname

  - copy: content="{{ new_hostname.stdout }}" dest=/etc/hostname
    when: new_hostname




  - name: Add MASQUERADE rule to POSTROUTING chain
    iptables:
      table: nat
      chain: POSTROUTING
      out_interface: en0
      jump: MASQUERADE
    when: "'en0' in network_interfaces.stdout"
    notify: Save iptables

  - name: Add FORWARD rule for RELATED,ESTABLISHED state
    iptables:
      chain: FORWARD
      in_interface: en0
      out_interface: en1
      match: state
      ctstate: RELATED,ESTABLISHED
      jump: ACCEPT
    when: "'en0' in network_interfaces.stdout"
    notify: Save iptables

  - name: Add FORWARD rule to allow traffic from rfsoc to internet
    iptables:
      chain: FORWARD
      in_interface: en1
      out_interface: en0
      jump: ACCEPT
    when: "'en0' in network_interfaces.stdout"
    notify: Save iptables

  - name: Ensure sysctl.conf has the correct values
    lineinfile:
      path: /etc/sysctl.conf
      state: present
      regexp: '^{{ item.key }}'
      line: '{{ item.key }}={{ item.value }}'
    loop:
      - { key: 'net.core.rmem_default', value: '26214400' }
      - { key: 'net.core.rmem_max', value: '104857600' }
      - { key: 'net.core.wmem_default', value: '65536' }
      - { key: 'net.core.wmem_max', value: '104857600' }

  - name: Apply sysctl settings
    command: sysctl -p

  # - name: Set ethtool ring buffer sizes
  #   command: ethtool -G eth2 rx 8192 tx 8192
  #   ignore_errors: yes

  # - name: Set MTU to 9000 on eth0
  #   command:
  #     cmd: ip link set dev eth0 mtu 9000
  #   ignore_errors: yes
  #   notify:
  #     - Restart networking

###### eth0 ######

  # - name: Check if eth0 has the IP address 192.168.4.1
  #   command:
  #     cmd: ip addr show dev eth0
  #   ignore_errors: yes
  #   register: eth0_output


  # - name: Check for eth0-connection
  #   command: nmcli connection show
  #   when: "'192.168.4.1' not in eth0_output.stdout"
  #   register: eth0_connection

  # - name: Add a new connection for eth0
  #   command: nmcli con add type ethernet ifname eth0 con-name eth0-connection
  #   when: "'192.168.4.1' not in eth0_output.stdout and 'eth0-connection' not in eth0_connection"

  # - name: Set IP address for eth0
  #   command: nmcli con mod eth0-connection ipv4.addresses "192.168.4.1/24"
  #   ignore_errors: yes
  #   when: "'192.168.4.1' not in eth0_output.stdout"
  #   notify:
  #     - Restart networking

  # - name: Set IP method to manual
  #   command: nmcli con mod eth0-connection ipv4.method manual
  #   ignore_errors: yes
  #   when: "'192.168.4.1' not in eth0_output.stdout"
  #   notify:
  #     - Restart networking

  # - name: Bring up the connection
  #   command: nmcli con up eth0-connection
  #   ignore_errors: yes
  #   when: "'192.168.4.1' not in eth0_output.stdout"
  #   notify:
  #     - Restart networking

  # - name: Check if eth1 has the IP address 192.168.20.1
  #   command:
  #     cmd: ip addr show dev eth1
  #   ignore_errors: yes
  #   register: eth1_output

  # - name: Add a new connection for eth0
  #   command: nmcli con add type ethernet ifname eth0 con-name eth0-connection

  # - name: Set IP address for eth1
  #   command: nmcli con mod eth1-connection ipv4.addresses "192.168.20.1/24"
  #   ignore_errors: yes
  #   when: "'192.168.20.1' not in eth1_output.stdout"
  #   notify:
  #     - Restart networking

  # - name: Set IP method to manual
  #   command: nmcli con mod eth1-connection ipv4.method manual
  #   ignore_errors: yes
  #   when: "'192.168.20.1' not in eth1_output.stdout"
  #   notify:
  #     - Restart networking

  # - name: Bring up the connection
  #   command: nmcli con up eth1-connection
  #   ignore_errors: yes
  #   when: "'192.168.20.1' not in eth1_output.stdout"
  #   notify:
  #     - Restart networking


  - name: Set kernel boot args
    copy:
      src: files/extlinux.conf
      dest: /boot/extlinux/extlinux.conf
      owner: root
      group: root

  - name: Set power mode
    copy:
      dest: /var/lib/nvpmodel/status
      content: "pmode:0003\n"
    register: need_reboot
    changed_when: need_reboot.changed






  handlers:
    - name: Save iptables
      command: /sbin/service iptables save
      when: ansible_os_family == "RedHat"

    - name: Save iptables
      command: /sbin/iptables-save
      when: ansible_os_family == "Debian"